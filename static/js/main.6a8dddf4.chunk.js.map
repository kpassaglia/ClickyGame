{"version":3,"sources":["components/BootstrapView/index.js","components/ClickCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["View","props","teamColors","backgroundColor","borderColor","color","react_default","a","createElement","Fragment","className","style","src","width","height","alt","href","role","id","score","highScore","correctClick","ClickCard","cardStyle","backgroundImage","concat","image","data-status","clicked","onClick","spursClicked","Wrapper","children","App","state","clickObjects","correct","win","randomize","Math","random","spursClick","_this","indexOf","length","Object","toConsumableArray","setState","sort","max","console","log","_this2","this","BootstrapView","components_Wrapper","map","components_ClickCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a8dddf4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction View(props){\n  let teamColors = {\n    backgroundColor: \"#101836\",\n    borderColor: \"#101836\",\n    color: \"white\"\n  };\n\n\n\nreturn<>\n<nav className=\"navbar navbar-light\" style={teamColors}>\n  <span className=\"navbar-brand\" style={teamColors}>\n  <img src=\"./logo.svg\" width=\"40\" height=\"40\" alt=\"\"></img>\n  COYS\n  </span>\n  \n</nav>\n<div className=\"jumbotron\">\n  <h1 className=\"display-4\">Pochettino Picks</h1>\n  <p className=\"lead\">How good is your memory?</p>\n  <hr className=\"my-4\"></hr>\n  <p>Click on the images to earn points, but be careful, click on the same image twice and you lose!</p>\n  <p className=\"lead\">\n    <a className=\"btn btn-primary btn-lg\" href=\"#game\" role=\"button\" style={teamColors}>Let's Go!</a>\n  </p>\n</div>\n<div id=\"game\" className=\"alert alert-dark\" role=\"alert\">\n <span>Score: {props.score} | High Score: {props.highScore} | {props.correctClick} </span>\n\n</div>\n{/* This is where the card component goes  */}\n\n    </>\n};\n\nexport default View;\n\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction ClickCard(props){\n\n  let cardStyle = {\n    backgroundImage: `url(${props.image})`,\n  };\n    return(\n    <div id={props.id} className=\"click-item\" data-status={props.clicked} style={cardStyle} onClick ={() => props.spursClicked(props.id)}>\n  </div>\n   \n);\n};\n\nexport default ClickCard","import React from \"react\";\nimport \"./style.css\"\n\nfunction Wrapper(props) {\n\n  return <div className=\"container-fluid\" >{props.children}</div>\n};\n\nexport default Wrapper","import React from 'react';\n// import logo from './logo.svg';\nimport View from \"./components/BootstrapView\"\nimport ClickCard from \"./components/ClickCard\"\nimport Wrapper from \"./components/Wrapper\"\nimport clickObjects from \"./clickObjects.json\"\n\n\nclass App extends React.Component {\n  state={\n    clickObjects,\n    score:  0,\n    highScore: 0,\n    correct: \"Start clicking to begin\",\n    win: false,\n    clicked:[]\n  }\n\n randomize = () => Math.random() > .5 ? -1 : 1\n\nspursClicked = spursClick => {\nif(this.state.clicked.indexOf(spursClick) === -1){\nlet score = this.state.clicked.length + 1,\n    clicked = score === this.state.clickObjects.length ? []: [...this.state.clicked,spursClick]\n    \n    this.setState({\n      clickObjects: this.state.clickObjects.sort(this.randomize),\n      clicked: clicked,\n      score: score,\n      highScore: Math.max(this.state.highScore, score),\n      correct:\"You guessed right!\",\n      win: score === this.state.clickObjects.length\n    })\n  console.log(this.state)\n}\nelse if(this.state.score === this.state.clickObjects.length - 1 ) {\n    \n  this.setState({\n    clickObjects: this.state.clickObjects.sort(this.randomize),\n    correct:\"YOU WIN! Let's see if you can do it again!\",\n    score:  0,\n    win: false,\n    clicked:[]\n  })\n}\nelse {\n  this.setState({\n    clickObjects: this.state.clickObjects.sort(this.randomize),\n    clicked: [],\n    score: 0,\n    correct: \"Bummer you lost.... Start clicking again to see if you can do better.\",\n    win: false\n  })\n  console.log(\"lose\")\n  console.log(this.state)\n}\n}\n\nrender(){\n  return (<>\n<View \nscore = {this.state.score}\nhighScore={this.state.highScore}\ncorrectClick={this.state.correct}\n/>\n<Wrapper>\n      {this.state.clickObjects.map(spursClick =>\n      <ClickCard\n        spursClicked={this.spursClicked}\n        clicked={this.state.clicked}\n        id = {spursClick.id}\n        key = {spursClick.id}\n        image={spursClick.image}\n      />\n  )}\n    </Wrapper>\n<footer className=\"page-footer font-small blue pt-4\">\n<div className=\"footer-copyright text-center py-3\">Kpassaglia 2019:\n    <a href=\"https://github.com/kpassaglia/ClickyGame\"> GitHub.com</a>\n  </div>\n</footer>\n    </>\n  );\n}\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}